{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsObject","map","good","index","name","id","App","useState","None","sortType","setSortType","isReversed","setIsReversed","visibleGoods","goods","toReverse","sortedGoods","Name","sort","good1","good2","localeCompare","Length","length","reverse","getSortedGoods","isResetSeen","className","type","cn","onClick","ReactDOM","render","document","getElementById"],"mappings":"6KAuBKA,E,sFAAAA,K,YAAAA,E,gBAAAA,E,mBAAAA,M,KAME,IAAMC,EAxBkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAeCC,KAAI,SAACC,EAAMC,GAAP,MAAkB,CAAEC,KAAMF,EAAMG,GAAIF,MAoBpC,IAAMG,EAAgB,WAC3B,MAAgCC,mBAAmBR,EAASS,MAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAtBR,SACEC,EACAL,EACAM,GAEA,IAAMC,EAAW,YAAOF,GAUxB,OARIL,IAAaV,EAASkB,MACxBD,EAAYE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMf,KAAKiB,cAAcD,EAAMhB,SAGhEK,IAAaV,EAASuB,QACxBN,EAAYE,MAAK,SAACC,EAAOC,GAAR,OAAkBD,EAAMf,KAAKmB,OAASH,EAAMhB,KAAKmB,UAG7DR,EAAYC,EAAYQ,UAAYR,EAOtBS,CAAezB,EAAaS,EAAUE,GACrDe,EAAcjB,IAAaV,EAASS,MAAQG,EAWlD,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBACZ,CAAE,WAAYpB,IAAaV,EAASkB,OACtCa,QAAS,kBAAMpB,EAAYX,EAASkB,OAJtC,iCASA,wBACEW,KAAK,SACLD,UAAWE,IAAG,oBACZ,CAAE,WAAYpB,IAAaV,EAASuB,SACtCQ,QAAS,kBAAMpB,EAAYX,EAASuB,SAJtC,4BASA,wBACEM,KAAK,SACLD,UAAWE,IAAG,oBACZ,CAAE,YAAalB,IACjBmB,QAlCoB,WAC1BlB,GAAeD,IA6BX,qBASCe,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAvCU,WAClBpB,EAAYX,EAASS,MACrBI,GAAc,IAkCR,sBAUJ,6BACGC,EAAaZ,KAAI,SAACC,GACjB,IACEE,EAEEF,EAFFE,KACAC,EACEH,EADFG,GAGF,OACE,oBAAI,UAAQ,OAAZ,SAA6BD,GAALC,YChHpC0B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2d49a963.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport cn from 'classnames';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ninterface Good {\n  name: string;\n  id: number;\n}\n\nenum SortType {\n  Name = 'name',\n  Length = 'length',\n  None = 'no-sorting',\n}\n\nexport const goodsObject: Good[] = goodsFromServer\n  .map((good, index) => ({ name: good, id: index }));\n\nfunction getSortedGoods(\n  goods: Good[],\n  sortType: SortType,\n  toReverse: boolean,\n): Good[] {\n  const sortedGoods = [...goods];\n\n  if (sortType === SortType.Name) {\n    sortedGoods.sort((good1, good2) => good1.name.localeCompare(good2.name));\n  }\n\n  if (sortType === SortType.Length) {\n    sortedGoods.sort((good1, good2) => good1.name.length - good2.name.length);\n  }\n\n  return toReverse ? sortedGoods.reverse() : sortedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState<SortType>(SortType.None);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const visibleGoods = getSortedGoods(goodsObject, sortType, isReversed);\n  const isResetSeen = sortType !== SortType.None || isReversed;\n\n  const handleReverseButton = () => {\n    setIsReversed(!isReversed);\n  };\n\n  const handleReset = () => {\n    setSortType(SortType.None);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info',\n            { 'is-light': sortType !== SortType.Name })}\n          onClick={() => setSortType(SortType.Name)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success',\n            { 'is-light': sortType !== SortType.Length })}\n          onClick={() => setSortType(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning',\n            { 'is-light': !isReversed })}\n          onClick={handleReverseButton}\n        >\n          Reverse\n        </button>\n\n        {isResetSeen && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map((good) => {\n          const {\n            name,\n            id,\n          } = good;\n\n          return (\n            <li data-cy=\"Good\" key={id}>{name}</li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}