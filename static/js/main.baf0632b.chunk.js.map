{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsObject","map","good","index","name","id","App","useState","None","sortType","setSortType","isReversed","setIsReversed","resetButton","visibleGoods","goods","toReverse","sortedGoods","sort","good1","good2","Name","localeCompare","Length","length","reverse","getSortedGoods","type","className","onClick","cn","ReactDOM","render","document","getElementById"],"mappings":"6KAuBKA,E,sFAAAA,K,YAAAA,E,gBAAAA,E,mBAAAA,M,KAME,IAAMC,EAxBkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAeCC,KAAI,SAACC,EAAMC,GAAP,MAAkB,CAAEC,KAAMF,EAAMG,GAAIF,MA4BpC,IAAMG,EAAgB,WAC3B,MAAgCC,mBAAmBR,EAASS,MAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEIC,EAAc,KAEZC,EAhCR,SACEC,EACAN,EACAO,GAEA,IAAMC,EAAW,YAAOF,GAkBxB,OAhBIN,GACFQ,EAAYC,MAAK,SAACC,EAAOC,GACvB,OAAQX,GACN,KAAKV,EAASsB,KACZ,OAAOF,EAAMf,KAAKkB,cAAcF,EAAMhB,MAExC,KAAKL,EAASwB,OACZ,OAAOJ,EAAMf,KAAKoB,OAASJ,EAAMhB,KAAKoB,OAExC,KAAKzB,EAASS,KACd,QACE,OAAO,MAKRQ,EAAYC,EAAYQ,UAAYR,EAStBS,CAAe1B,EAAaS,EAAUE,GAqB3D,OAfIF,IAAaV,EAASS,MAAQG,KAChCE,EACE,wBACEc,KAAK,SACLC,UAAU,4BACVC,QAAS,WACPnB,EAAYX,EAASS,MACrBI,GAAc,IALlB,oBAcF,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACED,KAAK,SACLC,UAAWE,IACT,SACA,UACA,CAAE,WAAYrB,IAAaV,EAASsB,OAEtCQ,QAAS,kBAAMnB,EAAYX,EAASsB,OAPtC,iCAYA,wBACEM,KAAK,SACLC,UAAWE,IACT,SACA,aACA,CAAE,WAAYrB,IAAaV,EAASwB,SAEtCM,QAAS,kBAAMnB,EAAYX,EAASwB,SAPtC,4BAYA,wBACEI,KAAK,SACLC,UAAWE,IACT,SACA,aACA,CAAE,YAAanB,IAEjBkB,QArDoB,WAC1BjB,GAAeD,IA6CX,qBAYCE,KAGH,6BACGC,EAAab,KAAI,SAACC,GACjB,IACEE,EAEEF,EAFFE,KACAC,EACEH,EADFG,GAGF,OACE,oBAAI,UAAQ,OAAZ,SAA6BD,GAALC,YCpIpC0B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.baf0632b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport cn from 'classnames';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ninterface Good {\n  name: string;\n  id: number;\n}\n\nenum SortType {\n  Name = 'name',\n  Length = 'length',\n  None = 'no-sorting',\n}\n\nexport const goodsObject: Good[] = goodsFromServer\n  .map((good, index) => ({ name: good, id: index }));\n\nfunction getSortedGoods(\n  goods: Good[],\n  sortType: SortType,\n  toReverse: boolean,\n): Good[] {\n  const sortedGoods = [...goods];\n\n  if (sortType) {\n    sortedGoods.sort((good1, good2) => {\n      switch (sortType) {\n        case SortType.Name:\n          return good1.name.localeCompare(good2.name);\n\n        case SortType.Length:\n          return good1.name.length - good2.name.length;\n\n        case SortType.None:\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return toReverse ? sortedGoods.reverse() : sortedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState<SortType>(SortType.None);\n  const [isReversed, setIsReversed] = useState(false);\n\n  let resetButton = null;\n\n  const visibleGoods = getSortedGoods(goodsObject, sortType, isReversed);\n\n  const handleReverseButton = () => {\n    setIsReversed(!isReversed);\n  };\n\n  if (sortType !== SortType.None || isReversed) {\n    resetButton = (\n      <button\n        type=\"button\"\n        className=\"button is-danger is-light\"\n        onClick={() => {\n          setSortType(SortType.None);\n          setIsReversed(false);\n        }}\n      >\n        Reset\n      </button>\n    );\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-info',\n            { 'is-light': sortType !== SortType.Name },\n          )}\n          onClick={() => setSortType(SortType.Name)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-success',\n            { 'is-light': sortType !== SortType.Length },\n          )}\n          onClick={() => setSortType(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={handleReverseButton}\n        >\n          Reverse\n        </button>\n\n        {resetButton}\n      </div>\n\n      <ul>\n        {visibleGoods.map((good) => {\n          const {\n            name,\n            id,\n          } = good;\n\n          return (\n            <li data-cy=\"Good\" key={id}>{name}</li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}